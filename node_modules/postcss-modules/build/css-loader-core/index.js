"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _postcss = require("postcss");

var _postcss2 = _interopRequireDefault(_postcss);

var _postcssModulesLocalByDefault = require("postcss-modules-local-by-default");

var _postcssModulesLocalByDefault2 = _interopRequireDefault(_postcssModulesLocalByDefault);

var _postcssModulesExtractImports = require("postcss-modules-extract-imports");

var _postcssModulesExtractImports2 = _interopRequireDefault(_postcssModulesExtractImports);

var _postcssModulesScope = require("postcss-modules-scope");

var _postcssModulesScope2 = _interopRequireDefault(_postcssModulesScope);

var _postcssModulesValues = require("postcss-modules-values");

var _postcssModulesValues2 = _interopRequireDefault(_postcssModulesValues);

var _parser = require("./parser");

var _parser2 = _interopRequireDefault(_parser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copied from https://github.com/css-modules/css-modules-loader-core

class Core {
  constructor(plugins) {
    this.plugins = plugins || Core.defaultPlugins;
  }

  load(sourceString, sourcePath, trace, pathFetcher) {
    let parser = new _parser2.default(pathFetcher, trace);

    return (0, _postcss2.default)(this.plugins.concat([parser.plugin])).process(sourceString, { from: "/" + sourcePath }).then(result => {
      return {
        injectableSource: result.css,
        exportTokens: parser.exportTokens
      };
    });
  }
}

exports.default = Core; // These four plugins are aliased under this package for simplicity.

Core.values = _postcssModulesValues2.default;
Core.localByDefault = _postcssModulesLocalByDefault2.default;
Core.extractImports = _postcssModulesExtractImports2.default;
Core.scope = _postcssModulesScope2.default;

Core.defaultPlugins = [_postcssModulesValues2.default, _postcssModulesLocalByDefault2.default, _postcssModulesExtractImports2.default, _postcssModulesScope2.default];